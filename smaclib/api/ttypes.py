#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TaskStatus:
  WAITING = 0
  RUNNING = 1
  PAUSED = 2
  COMPLETED = 3
  FAILED = 4

  _VALUES_TO_NAMES = {
    0: "WAITING",
    1: "RUNNING",
    2: "PAUSED",
    3: "COMPLETED",
    4: "FAILED",
  }

  _NAMES_TO_VALUES = {
    "WAITING": 0,
    "RUNNING": 1,
    "PAUSED": 2,
    "COMPLETED": 3,
    "FAILED": 4,
  }


class FileInfo:
  """
  Attributes:
   - mimetype
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mimetype', None, None, ), # 1
  )

  def __init__(self, mimetype=None,):
    self.mimetype = mimetype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mimetype = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FileInfo')
    if self.mimetype != None:
      oprot.writeFieldBegin('mimetype', TType.STRING, 1)
      oprot.writeString(self.mimetype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EncodingInfo:
  """
  Attributes:
   - format
   - video_bitrate
   - audio_bitrate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'format', None, None, ), # 1
    (2, TType.STRING, 'video_bitrate', None, None, ), # 2
    (3, TType.STRING, 'audio_bitrate', None, None, ), # 3
  )

  def __init__(self, format=None, video_bitrate=None, audio_bitrate=None,):
    self.format = format
    self.video_bitrate = video_bitrate
    self.audio_bitrate = audio_bitrate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.format = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.video_bitrate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.audio_bitrate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EncodingInfo')
    if self.format != None:
      oprot.writeFieldBegin('format', TType.STRING, 1)
      oprot.writeString(self.format)
      oprot.writeFieldEnd()
    if self.video_bitrate != None:
      oprot.writeFieldBegin('video_bitrate', TType.STRING, 2)
      oprot.writeString(self.video_bitrate)
      oprot.writeFieldEnd()
    if self.audio_bitrate != None:
      oprot.writeFieldBegin('audio_bitrate', TType.STRING, 3)
      oprot.writeString(self.audio_bitrate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskInfo:
  """
  Attributes:
   - task_id
   - name
   - status
   - statustext
   - parent
   - completed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'task_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'statustext', None, None, ), # 4
    (5, TType.STRING, 'parent', None, None, ), # 5
    (6, TType.DOUBLE, 'completed', None, None, ), # 6
  )

  def __init__(self, task_id=None, name=None, status=None, statustext=None, parent=None, completed=None,):
    self.task_id = task_id
    self.name = name
    self.status = status
    self.statustext = statustext
    self.parent = parent
    self.completed = completed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.task_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.statustext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.parent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.completed = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskInfo')
    if self.task_id != None:
      oprot.writeFieldBegin('task_id', TType.STRING, 1)
      oprot.writeString(self.task_id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.status != None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.statustext != None:
      oprot.writeFieldBegin('statustext', TType.STRING, 4)
      oprot.writeString(self.statustext)
      oprot.writeFieldEnd()
    if self.parent != None:
      oprot.writeFieldBegin('parent', TType.STRING, 5)
      oprot.writeString(self.parent)
      oprot.writeFieldEnd()
    if self.completed != None:
      oprot.writeFieldBegin('completed', TType.DOUBLE, 6)
      oprot.writeDouble(self.completed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
